#ACF whole vector
from __future__ import division
import numpy as np
import MDAnalysis as mdana

# Function to calculate the end-to-end vector autocorrelation function (ACF)
def calculate_acf(trajectory_file, gro_file, output_file, nframe=5001, dt=0.02):
    u = mdana.Universe(gro_file, trajectory_file)

    # Initialize arrays to store end-to-end vectors
    Vees = []
    with open(index_file, 'r') as f:
      lines = f.readlines()
    atom_indices = [int(idx) for idx in lines[1].split()]
    atoms1_indicest_minus_1 = [x - 1 for x in atom_indices]
    selected_atoms = u.atoms[atoms1_indicest_minus_1]

    for i in range(nframe):
        frame = u.trajectory[i]
        positions = selected_atoms.positions
        Vee = positions[-1] - positions[0]
        Vees.append(Vee)

    # Calculate autocorrelation function
    acfs, num = [0] * nframe, [0] * nframe
    tot = int(nframe)

    for i in range(tot):
        for j in range(i, min(i + tot, nframe)):
            bin = j - i
            acf = np.dot(Vees[i], Vees[j]) / np.dot(Vees[i], Vees[i])
            acfs[bin] = acfs[bin] + acf
            num[bin] += 1

             #Ensure that bin is within the valid range
            if bin < len(acfs):
                acfs[bin] = acfs[bin] + acf
                num[bin] += 1

    # Write results to output file
    with open(output_file, 'w') as fout:
        for i in range(len(acfs)):
            if num[i] != 0:
                acfs[i] = acfs[i] / num[i]
                fout.write(f"{i * dt} {acfs[i]}\n")

if __name__ == "__main__":
    trajectory_file = 'output600-800-2.xtc'  # Replace with your trajectory file
    gro_file = 'conf2.gro'          # Replace with your coordinate file
    output_file = '36-2-amy600-800-2.txt'
    index_file = "index.ndx"

    calculate_acf(trajectory_file, gro_file, output_file)
